1580041550596:(require '[clojure.repl :refer :all])
1580093428621:({:a 1 :b 2})
1580093433204:(:a {:a 1 :b 2})
1580093445357:(:a {:a 1 :b 2 :ns/a 11})
1580093482739:(:a {:b 2 :ns/a 11})
1580093489751:(get :a {:b 2 :ns/a 11})
1580093493932:(get :ns/a {:b 2 :ns/a 11})
1580093501554:(\n:ns/a {:b 2 :ns/a 11})
1580093523631:(require '[clojure.repl :refer :all])
1580093530171:(doc get_\n     )
1580093540428:(doc get)
1580093909329:(require '[micheam.todo.db :as db])
1580093916177:(doc require)
1580093949170:(require '[micheam.todo.db :as db] :reload)
1580093975884:(in-ns 'micheam.todo.db)
1580093988898:(use 'clojure.repl)
1580093993042:(doc doc)
1580094017236:(drop-table! db-spec)
1580094027252:(create-table! db-spec)
1580094032555:(list-all db-spec)
1580094095429:(do (drop-table! db-spec) (create-table! db-spec))
1580094097898:(list-all db-spec)
1580094258382:(create! db-spec {:title "foo"})
1580094298824:(list-all)
1580094305350:(list-all db-spec)
1580094365096:(create! db-spec {:title "foo"})
1580094518017:(-> (java.util.UUID/fromString "6a9dbf31-90c5-4814-9c21-b4472cb1cff4") id (edit! db-spec {:todo/id id, :todo/title "Hi :)"}))
1580094520801:(list-all db-spec)
1580094555235:(-> (java.util.UUID/fromString "6a9dbf31-90c5-4814-9c21-b4472cb1cff4") id (edit! db-spec {:todo/id id, :todo/title "Hi :)"}))
1580094557315:(list-all db-spec)
1580094636811:(-> (java.util.UUID/fromString "6a9dbf31-90c5-4814-9c21-b4472cb1cff4") id (edit! db-spec {:todo/id id, :todo/title "Hi :)"}))
1580094704412:(require clojure.pprint)
1580094715565:(add-tap clojure.pprint/pprint)
1580094719956:(-> (java.util.UUID/fromString "6a9dbf31-90c5-4814-9c21-b4472cb1cff4") id (edit! db-spec {:todo/id id, :todo/title "Hi :)"}))
1580094774350:(as-> (java.util.UUID/fromString "6a9dbf31-90c5-4814-9c21-b4472cb1cff4") id (edit! db-spec {:todo/id id, :todo/title "Hi :)"}))
1580094837327:(edit! db-spec {:todo/id (java.util.UUID/fromString "6a9dbf31-90c5-4814-9c21-b4472cb1cff4"), :todo/title "FOOOOOOOOOOOOO", :title "wwwwwwww"})
1580094853446:flush
1580094857304:(flush)
1580094880786:(edit! db-spec {:todo/id (java.util.UUID/fromString "6a9dbf31-90c5-4814-9c21-b4472cb1cff4"), :todo/title "FOOOOOOOOOOOOO", :title "wwwwwwww"})
1580095006905:(list-all db-spec)
1580095045298:(edit! db-spec {:todo/id (java.util.UUID/fromString "6a9dbf31-90c5-4814-9c21-b4472cb1cff4"), :todo/title "FOOOOOOOOOOOOO", :title "wwwwwwww"})
1580095385885:(dissoc! {:id 1, :name "Hooo"} :id)
1580095391422:(dissoc {:id 1, :name "Hooo"} :id)
1580095400463:(edit! db-spec {:todo/id (java.util.UUID/fromString "6a9dbf31-90c5-4814-9c21-b4472cb1cff4"), :todo/title "FOOOOOOOOOOOOO", :title "wwwwwwww"})
1580095403686:(list-all db-spec)
1580095421662:(edit! db-spec {:todo/id (java.util.UUID/fromString "6a9dbf31-90c5-4814-9c21-b4472cb1cff4"), :todo/title "FOOOOOOOOOOOOO"\n                })
1580095424782:(list-all db-spec)
1580104514570:(in-ns 'micheam.todo)
1580104516057:(defprotocol TodoRepository [conn]\n  (_create! [this todo])\n  (_edit! [this todo])\n  (_list-all [this])\n  (_get-by-id [this id]))
1580104524528:(+ 1 aa)
1580104583260:(defprotocol P [] (hello [this]))
1580110703294:(require 'micheam.todo.db)
1580110754684:(defn createRepo [] (micheam.todo.db/->SQLTodoRepository {:dbtype "h2.mem" :dbname "todo"})\n  )
1580110779384:(defn create-repo [] (micheam.todo.db/->SQLTodoRepository {:dbtype "h2.mem" :dbname "todo"}))
1580110810950:(require 'micheam.todo)
1580110853240:(as-> create-repo $ (micheam.todo/create! $ {:todo/title "this is title"}))
1580112105887:(count "aaaa")
1580112130656:(> 0 (count "hotge"))
1580112139376:(< 0 (count "hotge"))
1580112292690:(require 'clojure.test)
1580112320202:(clojure.test/run-tests 'micheam.todo.db-test)
1580112402331:(list-all db-spec)
1580113332099:(require '[next.jdbc :as jdbc])
1580113354715:(require '[next.jdbc.sql :as sql])
1580113388254:(sql/query {:dbtype "h2.mem", :dbname "todo"} ["select * from todo"])
1580113402235:*1
1580113412757:(print *1)
1580114373130:(remove-ns 'micheam.todo.db-test)
1580149110701:(require 'micheam.todo.db)
1580149124535:(in-ns 'micheam.todo.db)
1580149183268:(print 1)
1580149198464:(in-ns 'user)
1580149294312:(require '[next.jdbc :as jdbc])
1580149309264:(require '[next.jdbc.sql :as sql])
1580149346559:(sql/query {:dbtype "h2:mem", :dbname "todo"} ["select * from todo;"])
1580149432223:(require '[next.jdbc :as jdbc])
1580149437463:(require '[next.jdbc.sql :as sql])
1580149440112:(sql/query {:dbtype "h2:mem", :dbname "todo"} ["select * from todo;"])
1580149471282:(require '[micheam.todo.db :as db])
1580150205254:(in-ns 'micheam.todo.db)
1580150246970:(sql/query {:dbtype "h2:mem", :dbname "todo"} \n           ["select * from todo"])
1580150268038:(in-ns 'user)
1580150306881:(require '[next.jdbc :as jdbc] '[next.jdbc.sql :as sql])
1580150349035:(sql/query {:dbtype "h2:mem", :dbmame "todo"}\n           ["select * from todo"])
1580150417901:(requi\n \n \n )
1580150435674:(require 'micheam.todo.db)
1580150475815:(require 'next.jdbc 'next.jdbc.sql)
1580150681678:(next.jdbc.sql/query {:dbtype "h2:mem", :dbmame "todo"}\n                     ["select * from todo"])
1580150888263:(require '[nrepl.server :refer [start-server stop-server]])
1580150977491:(defonce server (start-server :port 7888))
1580151031035:server
1580151100820:(require 'micheam.todo.db)
1580151118226:(require '[micheam.todo.db :as db])
1580151144929:(def rep db/->SQLTodoRepository {:dbtype "h2:mem", :dbname "todo"})
1580151160220:(def rep (db/->SQLTodoRepository {:dbtype "h2:mem", :dbname "todo"}))
1580151182171:(require '[micheam.todo :as todo])
1580151199043:(todo/create! rep {})
1580151207681:(db/create-table!)
1580151224729:(db/create-table! {:dbtype "h2:mem", :dbmame "todo"})
1580151232636:(todo/create! rep {})
1580151253493:(doc db/create-table!)
1580151272192:(require '[clojure.repl :refer :all])
1580151281433:(doc todo/create!)
1580151326144:(source db/create-table!)
1580151349894:(db/create-table! {:dbtype "h2:mem", :dbmame "todo"})
1580151362375:(db/drop-table! {:dbtype "h2:mem", :dbmame "todo"})
1580151405492:(require '[next.jdbc :as jdbc] '[next.jdbc.sql :as sql])
1580151453211:(def db-spec {:dbtype "h2:mem", :dbname "todo"})
1580151464271:(source db/create-table!)
1580151536559:(with-open [conn (jdbc/get-connection db-spec)]\n  (jdbc/execute-one! conn ["show tables"]))
1580151545266:(with-open [conn (jdbc/get-connection db-spec)]\n  (jdbc/execute-one! conn ["show tables from todo;"]))
1580151559332:(with-open [conn (jdbc/get-connection db-spec)]\n  (sql/query conn ["show tables from todo;"]))
1580151579794:(source micheam.todo.db/*transaction-opt*)
1580151611021:(db/create-table! db-spec\n)
1580151614346:(with-open [conn (jdbc/get-connection db-spec)]\n  (sql/query conn ["show tables from todo;"]))
1580151703146:(with-open [conn (jdbc/get-connection db-spec)]\n  (sql/query conn ["select * from todo;"]))
1580151747888:(with-open [conn (jdbc/get-connection db-spec)]\n  (sql/insert! conn :todo {:title "foo", :id (java.util.UUID/randomUUID)}]))
1580151755986:(with-open [conn (jdbc/get-connection db-spec)]\n  (sql/insert! conn :todo {:title "foo", :id (java.util.UUID/randomUUID)}))
1580151776176:(with-open [conn (jdbc/get-connection db-spec)]\n  (sql/insert! conn :todo {:title "foo", :id (java.util.UUID/randomUUID, :created-at nil)}))
1580151942745:(require '[micheam.todo.db :as db] :reload)
1580151951024:(db/trancate-table! db-spec)
1580151990432:(db/truancate-table! db-spec)
1580151994865:(require '[micheam.todo.db :as db] :reload)
1580152003022:(db/truncate-table! db-spec)
1580152021055:(require '[micheam.todo.db :as db] :reload)
1580152022697:(db/truncate-table! db-spec)
1580152624144:server
1580152809924:(require 'clojure.test)
1580152822835:(clojure.test/run-all-tests)
1580153888992:(defprotocol P (hello [this]))
1580153921503:(defrecord R P (hello [this] (str "Hello")))
1580153977492:(-> (->R "foo") hello)
1580154000271:(def rec (->R "foo"))
1580154007395:(satisfies? P rec)
1580154585650:(ns a)\n\n(defprotocol Foo\n  (foo [this]))\n\n(ns b\n  (:require [a])\n  (:import a.Foo))\n\n;; bad\n(satisfies? Foo :test) ; => NPE\n;; good\n(satisfies? a/Foo :test) ; => false
1580154642660:(defrecord Bar [] a.Foo (foo [this] ()))
1580154651543:(satisfies? a/Foo Bar)
1580154669779:(satisfies? a/Foo (->Bar 1))
1580154681070:(->Bar)
1580154685191:(satisfies? a/Foo (->Bar))
1580154695564:(ns c)
1580154708125:(require 'a 'b)
1580154725786:(-> b/->Bar)
1580154750934:(->> b/->Bar (satisfies? a/Foo)
1580154755988:(->> b/->Bar (satisfies? a/Foo))
1580156471833:(ns user)
1580156491819:(clojure.test/run-tests 'micheam.todo.db-test)
1580156497170:(clojure.test/run-tests 'micheam.todo.db)
1580156511008:(clojure.test/run-all-tests)
1580186971161:(into [] (1 2))
1580186993179:(into [] '(1 2))
1580187054571:(into [] #(+ 1 %) '(1 2))
1580187079164:(into [] (map #(+ 1 %)) '(1 2))
1580187565136:(for [[k v] {:id 1 :name "maeda"}] [k v])
1580187591330:(for [[k v] {:id 1 :name "maeda"}] [(keyword (name k) "foo") v])
1580187603552:(for [[k v] {:id 1 :name "maeda"}] [(keyword "foo" (name k)) v])
1580187616200:(into {} (for [[k v] {:id 1 :name "maeda"}] [(keyword "foo" (name k)) v]))
1580187627592:(into [] (for [[k v] {:id 1 :name "maeda"}] [(keyword "foo" (name k)) v]))
1580187632586:(into '() (for [[k v] {:id 1 :name "maeda"}] [(keyword "foo" (name k)) v]))
1580187641001:(into #{} (for [[k v] {:id 1 :name "maeda"}] [(keyword "foo" (name k)) v]))
1580189604696:(import '[java.time ZonedDateTime])
1580189656056:(ZonedDateTime/parse "2020-01-28 14:26:20.487+09")
1580189666795:(ZonedDateTime/parse "2020-01-28T14:26:20.487+09")
1580189844298:(import '[java.time DateTimeFormatter])
1580189872210:(import '[java.time.format DateTimeFormatter])
1580190004816:(DateTimeFormatter/ofPattern "yyyy-MM-dd hh:mm:ss.SX")
1580190024441:(def formatter (DateTimeFormatter/ofPattern "yyyy-MM-dd hh:mm:ss.SX"))
1580190050617:(ZonedDateTime/parse "2020-01-28 14:26:20.487+09" formatter)
1580190084433:(take 21 "2020-01-28 14:26:20.487+09")
1580190102074:(tail (take 21 "2020-01-28 14:26:20.487+09"))
1580190111914:(last (take 21 "2020-01-28 14:26:20.487+09"))
1580190126690:(def formatter (DateTimeFormatter/ofPattern "yyyy-MM-dd hh:mm:ssX"))
1580190134498:(ZonedDateTime/parse "2020-01-28 14:26:20+09" formatter)
1580190163522:(def formatter (DateTimeFormatter/ofPattern "yyyy-MM-dd HH:mm:ssX"))
1580190165163:(ZonedDateTime/parse "2020-01-28 14:26:20+09" formatter)
1580190321229:(->> (datetimeformatter/ofPattern "yyyy-MM-dd HH:mm:ssX") (ZonedDateTime/parse "2010-01-27 14:59:24.120+09"))
1580190331325:(->> (DatetimeFormatter/ofPattern "yyyy-MM-dd HH:mm:ssX") (ZonedDateTime/parse "2010-01-27 14:59:24.120+09"))
1580190335252:(->> (DateTimeFormatter/ofPattern "yyyy-MM-dd HH:mm:ssX") (ZonedDateTime/parse "2010-01-27 14:59:24.120+09"))
1580190372680:(->> (DateTimeFormatter/ofPattern "yyyy-MM-dd HH:mm:sSX") (ZonedDateTime/parse "2010-01-27 14:59:24.120+09"))
1580190383389:(->> (DateTimeFormatter/ofPattern "yyyy-MM-dd HH:mm:s.SX") (ZonedDateTime/parse "2010-01-27 14:59:24.120+09"))
1580190402622:(->> (DateTimeFormatter/ofPattern "yyyy-MM-dd HH:mm:s.S") (ZonedDateTime/parse "2010-01-27 14:59:24.120"))
1580190412255:(->> (DateTimeFormatter/ofPattern "yyyy-MM-dd HH:mm:ss.SSS") (ZonedDateTime/parse "2010-01-27 14:59:24.120"))
1580190431647:C\n(->> (DateTimeFormatter/ofPattern "yyyy-MM-dd HH:mm:ss.SSSX") (ZonedDateTime/parse "2010-01-27 14:59:24.120+09"))
1580190446951:(->> (DateTimeFormatter/ofPattern "yyyy-MM-dd HH:mm:ss.SSSX") (ZonedDateTime/parse "2010-01-27 14:59:24.120+09"))
1580190888486:(into [] () [1 2 3])
1580190898326:(into [] #(+ 1 %) [1 2 3])
1580190929255:(into [] (for [x [1 2 3]] (x)))
1580190934286:(into [] (for [x [1 2 3]] [x]))
1580190938093:(into [] (for [x [1 2 3]] x))
1580190959215:(into [] (for [x [{:id 1} {:id 2} {:id 3}]] x))
1580190994327:(into [] (for [x [{:id 1} {:id 2} {}]] (assoc :id (get :id x 0))))
1580191022335:(into [] (for [x [{:id 1} {:id 2} {}]] (assoc x :id (get :id x 0))))
1580191043512:(into [] (for [x [{:id 1} {:id 2} {}]] (assoc x :id (:id x))))
1580191048784:(into [] (for [x [{:id 1} {:id 2} {}]] (assoc x :id (:id x 0))))
1580194033603:(as-> "aaa" $\n  (println (str "1:" $))\n  _\n  )
1580194038226:(as-> "aaa" $\n  (println (str "1:" $)))
1580194050564:(as-> "aaa" $\n  (println (str "1:" $))\n  (println (str "2:" $)))
1580194076146:(as-> "aaa" $\n  (str "1:" $)\n  (str "2:" $))
1580195064526:(defmacro chain [x form]\n  `(. ~x ~form))
1580195087191:(macroexpand-1 '(chain 1 2))
1580195097519:(macroexpand-1 '(chain arm getHand))
1580195115152:(defmacro chain [x & body]\n  `(. ~x ~@body))
1580195119668:(macroexpand-1 '(chain arm getHand))
1580195129920:(macroexpand-1 '(chain arm getHand andOther))
1580195186736:(defmacro try-catch [x & body]\n  `(try ~@body (catch Exception ex (~x)))\n  )
1580195219442:(macroexpand-1 '(try-catch (str 1) (print 1)))
